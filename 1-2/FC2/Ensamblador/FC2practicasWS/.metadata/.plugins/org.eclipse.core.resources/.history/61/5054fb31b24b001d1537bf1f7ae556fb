#define N 5
#define bool char

//nuestros dos vectores de N componentes
int U[N] = {5, 2, -3, 7, 6};
int V[N] = {6, -1, 1, 0, 3};
//variable que almacenará el resultado: 1 si U es mayor, 0 si es V
bool mayor_u;

void main() {
	//calculamos la distancia euclídea al origen
	int d_u = dist_to_zero(U, N);
	int d_v = dist_to_zero(V, N);
	//vemos si U estaba más lejos
	bool mayor = d_u > d_v;
	guardar(mayor, &mayor_u);
}

/**
 * Calculamos distancia euclídea. Sumamos todos los cuadrados
 * y terminamos sacando la raíz cuadrada (entera)
 */
int eucl_dist(int * W, int N) {
	int acc = 0;
	int i = 0;
	for (i = 0; i < N; i++) {
		acc += mul(W[i], W[i]);
	}
	return i_sqrt(acc);
}

/**
 * Función simple que multiplica dos números iterativamente
 */
int mul(int a, int b) {
	int res = 0;
	while (a--) res += b;
	return res;
}

/**
 * Función simple que obtiene la raíz cuadrada iterativamente
 */
int i_sqrt(int a) {
	int root = 0;
	while (mul(root, root) < a) {
		root++;
	}
	return root;
}

/**
 * Función que guarda un valor en el puntero proporcionado
 */
void guardar(bool valor, bool * ubicación) {
	*ubicación = valor;
}
